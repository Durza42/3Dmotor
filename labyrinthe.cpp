#include "labyrinthe.h"

Labyrinthe::Labyrinthe (std::string vertex_shader, std::string fragment_shader) :   m_murs {

                        /* salles */

                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (5.0f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (17.5f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (5.0f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (5.0f, 17.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 19.5f, 0.5f, glm::vec3 (5.0f, 24.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 19.5f, glm::vec3 (24.0f, 5.0f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (-11.5f, -5.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (-24.0f, -5.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (-5.5f, -11.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (-5.5f, -24.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 19.5f, 0.5f, glm::vec3 (-24.5f, -24.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 19.5f, glm::vec3 (-24.5f, -24.5f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (-11.5f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (-24.0f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (-5.5f, 5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (-5.5f, 17.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 19.5f, 0.5f, glm::vec3 (-24.5f, 24.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 19.5f, glm::vec3 (-24.5f, 5.0f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (5.0f, -5.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 6.5f, 0.5f, glm::vec3 (17.5f, -5.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (5.0f, -11.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 6.5f, glm::vec3 (5.0f, -24.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 19.5f, 0.5f, glm::vec3 (5.0f, -24.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 19.5f, glm::vec3 (24.0f, -24.5f, 0.01f)),

                        /* couloirs */

                    Mur (vertex_shader, fragment_shader, 5.0f, 10.0f, 0.5f, glm::vec3 (-5.0f, 11.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 10.0f, 0.5f, glm::vec3 (-5.0f, 17.5f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 10.0f, 0.5f, glm::vec3 (-5.0f, -11.5f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 10.0f, 0.5f, glm::vec3 (-5.0f, -18.0f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 10.0f, glm::vec3 (-11.5f, -5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 10.0f, glm::vec3 (-18.0f, -5.0f, 0.01f)),

                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 10.0f, glm::vec3 (11.0f, -5.0f, 0.01f)),
                    Mur (vertex_shader, fragment_shader, 5.0f, 0.5f, 10.0f, glm::vec3 (17.5f, -5.0f, 0.01f)),
                                },
                                     m_colision_map {
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,0,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
                                    }
                              {

   for (size_t i = 0 ; i < NB_MURS ; ++i)
      m_hitboxs [i] = Hitbox (m_murs [i].get_pos (), m_murs [i].get_taille ());
}


Labyrinthe::~Labyrinthe () {
   
}


Hitbox Labyrinthe::get_hitbox (size_t const i) const {
   return m_hitboxs [i];
}

std::array <Hitbox, NB_MURS> Labyrinthe::get_hitbox () const {
   return m_hitboxs;
}

void Labyrinthe::print (glm::mat4 view, glm::mat4 projection, glm::mat4 model, glm::vec3 lightPos, glm::vec3 posCamera, glm::vec3 light_ambient, glm::vec3 light_diffuse, glm::vec3 light_specular) const {
   for (size_t i = 0 ; i < NB_MURS ; ++i) {
      m_murs [i].afficher (view, projection, model, lightPos, posCamera, light_ambient, light_diffuse, light_specular);
   }
}

std::array <bool, 2500> Labyrinthe::get_grid () const {
   return m_colision_map;
}

bool Labyrinthe::get_member_grid (const int x, const int y) const {
   return m_colision_map [50 * y + x];
}
